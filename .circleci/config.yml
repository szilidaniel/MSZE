compile_gcc: &compile_gcc
   steps:
    - checkout
    - run:
        name: Init dependencies
        command: |
          wget https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.tar.gz
          tar -xvzf cmake-3.10.2-Linux-x86_64.tar.gz
          chmod +x ./cmake-3.10.2-Linux-x86_64/bin/ccmake
          chmod +x ./cmake-3.10.2-Linux-x86_64/bin/cmake
          chmod +x ./cmake-3.10.2-Linux-x86_64/bin/cpack
          chmod +x ./cmake-3.10.2-Linux-x86_64/bin/ctest
          DIR=$(pwd)
          ln -s $DIR/cmake-3.10.2-Linux-x86_64/bin/ccmake /usr/bin/ccmake
          ln -s $DIR/cmake-3.10.2-Linux-x86_64/bin/cmake /usr/bin/cmake
          ln -s $DIR/cmake-3.10.2-Linux-x86_64/bin/cpack /usr/bin/cpack
          ln -s $DIR/cmake-3.10.2-Linux-x86_64/bin/ctest /usr/bin/ctest
          apt-get update
          apt-get install zip -y
     - run:
        name: Init submodules
        command: |
          git submodule init
          git submodule update
     - run:
        name: Build
        command: |
          mkdir build
          cd build
          cmake ..  -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_DEBUG_POSTFIX=_d -DBUILD_INSTALL=ON
          make install
     - run:
        name: Test
        command: |
          cd build
          ctest --verbose -C MinSizeRel
     - run:
        name: Deploy
        command: |
          export GCC_MACHINE=$(gcc -dumpmachine)
          export GCC_VERSION=$(gcc -dumpversion)
          export GITHUB_REPO_TAG=$(git describe)
          cd install && zip -r "../rew-$GITHUB_REPO_TAG-$GCC_MACHINE-$GCC_VERSION.zip" * && cd ..
          chmod +x ./publish.sh
          ./publish.sh rew-$GITHUB_REPO_TAG-$GCC_MACHINE-$GCC_VERSION.zip $GITHUB_REPO_TAG

version: 2
jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: 'make'
      - persist_to_workspace:
          root: .
          paths:
            - terminal
  test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 'chmod 755 test'
      - run: './test'
  compile_gcc_550:
    <<: *compile_gcc

    docker:
      - image: gcc:5.5.0

  compile_gcc_640:
    <<: *compile_gcc

    docker:
      - image: gcc:6.4.0
  
  compile_gcc_730:
    <<: *compile_gcc

    docker:
      - image: gcc:7.3.0

  compile_gcc_820:
    <<: *compile_gcc

    docker:
      - image: gcc:8.2.0


  build_docs:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: Init dependencies
          command: |
            sudo apt install doxygen
            git clone https://github.com/matusnovak/doxybook.git
            cd doxybook
            sudo python setup.py install

      - run:
          name: Build
          command: |
            chmod +x ./doxygen/make.sh
            ./doxygen/make.sh
            mkdir /tmp/doxygen
            cp -v ./doxygen/*.md /tmp/doxygen
      
      - persist_to_workspace:
          root: /tmp
          paths:
            - doxygen

  upload_docs:
    docker:
      - image: circleci/node:9
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Init dependencies
          command: |
            sudo npm install -g vuepress
            npm install

      - run:
          name: Build
          command: |
            cp -v /tmp/doxygen/*.md ./doxygen
            vuepress build || true

      - run:
          name: Deploy
          command: |
            git config --global user.email "szilidaniel98@gmail.com"
            git config --global user.name "szilidan"
            npm run publish


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - compile_gcc_550
      - compile_gcc_640:
          requires:
            - compile_gcc_550
      - compile_gcc_730:
          requires:
            - compile_gcc_640
      - compile_gcc_820:
          requires:
            - compile_gcc_730
      - build_docs:
          requires:
            - compile_gcc_820
          filters:
            branches:
              only:
                - master
      - upload_docs:
          requires:
            - build_docs
          filters:
            branches:
              only:
                - master

